#!/usr/bin/env node
process.env.UV_THREADPOOL_SIZE=8*require('os').cpus().length;
//const cli = require('command-line-args');
const open_console = require('open_console');
const pkg = require('../package.json');
const vue = require('../lib/index');
const mri = require('mri');
let myArgs = mri(process.argv, {
    alias: {
        src: ['s','source'],
        clean: ['x','clear'],
        cpu: ['c','cpu'],
        help: ['h','ayuda'],
        debug: 'd',
        justgit: ['g','justgit']
    },
    boolean: ['clean','debug','justgit'],
    default: {
        clean:false,
        debug:false,
        justgit:false
    }
});
delete myArgs._;
if (myArgs.cpu) {
    process.env.UV_THREADPOOL_SIZE=8*parseFloat(myArgs.cpu);
    delete myArgs.cpu;
}

/* */
(async () => {
    // testing code here
    //let file = (myArgs.length>0)?myArgs[0]:'vue.dsl';
    //let debug = (myArgs.length>1)?eval(myArgs[1].trim()):false;
    let x_console = new open_console();
    x_console.title({ title:`Concepto VUE_DSL Compiler v${pkg.version}`, titleColor:'brightYellow', color:'green' });
    let printUsage = function() {
        x_console.out({ message:'Usage:', color:'cyan' });
        x_console.out({ message:'vue_dsl [options]', color:'yellow' });
        console.log('');
        //if (myArgs.help) {
            x_console.out({ message:'Options:', color:'brightCyan' });
            x_console.out({ message:'-s, --src vue.dsl\t(required) relative/absolute vue.dsl file to parse', color:'cyan' });
            x_console.out({ message:'-x, --clean\t\tclear cache before compiling', color:'cyan' });
            x_console.out({ message:'-g, --justgit\t\tjust create the _git.dsl version', color:'cyan' });
            x_console.out({ message:'-c, --cpu [float]\tamount of cpus to use. default:'+require('os').cpus().length, color:'cyan' });
            x_console.out({ message:'-d, --debug\t\tturns verbose logging on', color:'cyan' });
            x_console.out({ message:'-h, --help\t\tthis console output', color:'cyan' });
            console.log('');
        //}
    };
    if (myArgs.help || !myArgs.src) {
        printUsage();
    } else {
        let opts = { debug:false }, file = '';
        if (myArgs.src) file = myArgs.src;
        if (file!='') {
            let base = new vue(file,myArgs);
            await base.init();
            await base.addCommands(require('../lib/commands.js'));
            await base.process();
            console.log('total time passed, since constructor: '+base.secsPassed_());
        } else {
            console.log('--src requires a file to be specified!')
            printUsage();
        }
    }
})().catch(err => {
    console.error(err);
});
/* */